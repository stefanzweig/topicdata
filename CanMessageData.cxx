// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CanMessageData.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CanMessageData.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




canMessage::canMessage()
{
}

canMessage::~canMessage()
{
}

canMessage::canMessage(
        const canMessage& x)
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = x.m_data;
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
}

canMessage::canMessage(
        canMessage&& x) noexcept
{
    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = std::move(x.m_data);
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
}

canMessage& canMessage::operator =(
        const canMessage& x)
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = x.m_data;
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
    return *this;
}

canMessage& canMessage::operator =(
        canMessage&& x) noexcept
{

    m_channel = x.m_channel;
    m_id = x.m_id;
    m_dlc = x.m_dlc;
    m_dataLen = x.m_dataLen;
    m_data = std::move(x.m_data);
    m_cycTime = x.m_cycTime;
    m_flags = x.m_flags;
    m_timeStamp = x.m_timeStamp;
    m_timeStamp_d = x.m_timeStamp_d;
    m_rxtx = x.m_rxtx;
    m_isFd = x.m_isFd;
    m_isRt = x.m_isRt;
    m_isExt = x.m_isExt;
    m_errorCode = x.m_errorCode;
    return *this;
}

bool canMessage::operator ==(
        const canMessage& x) const
{
    return (m_channel == x.m_channel &&
           m_id == x.m_id &&
           m_dlc == x.m_dlc &&
           m_dataLen == x.m_dataLen &&
           m_data == x.m_data &&
           m_cycTime == x.m_cycTime &&
           m_flags == x.m_flags &&
           m_timeStamp == x.m_timeStamp &&
           m_timeStamp_d == x.m_timeStamp_d &&
           m_rxtx == x.m_rxtx &&
           m_isFd == x.m_isFd &&
           m_isRt == x.m_isRt &&
           m_isExt == x.m_isExt &&
           m_errorCode == x.m_errorCode);
}

bool canMessage::operator !=(
        const canMessage& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void canMessage::channel(
        uint32_t _channel)
{
    m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
uint32_t canMessage::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
uint32_t& canMessage::channel()
{
    return m_channel;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void canMessage::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t canMessage::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& canMessage::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member dlc
 * @param _dlc New value for member dlc
 */
void canMessage::dlc(
        uint8_t _dlc)
{
    m_dlc = _dlc;
}

/*!
 * @brief This function returns the value of member dlc
 * @return Value of member dlc
 */
uint8_t canMessage::dlc() const
{
    return m_dlc;
}

/*!
 * @brief This function returns a reference to member dlc
 * @return Reference to member dlc
 */
uint8_t& canMessage::dlc()
{
    return m_dlc;
}


/*!
 * @brief This function sets a value in member dataLen
 * @param _dataLen New value for member dataLen
 */
void canMessage::dataLen(
        uint16_t _dataLen)
{
    m_dataLen = _dataLen;
}

/*!
 * @brief This function returns the value of member dataLen
 * @return Value of member dataLen
 */
uint16_t canMessage::dataLen() const
{
    return m_dataLen;
}

/*!
 * @brief This function returns a reference to member dataLen
 * @return Reference to member dataLen
 */
uint16_t& canMessage::dataLen()
{
    return m_dataLen;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void canMessage::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void canMessage::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& canMessage::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& canMessage::data()
{
    return m_data;
}


/*!
 * @brief This function sets a value in member cycTime
 * @param _cycTime New value for member cycTime
 */
void canMessage::cycTime(
        uint64_t _cycTime)
{
    m_cycTime = _cycTime;
}

/*!
 * @brief This function returns the value of member cycTime
 * @return Value of member cycTime
 */
uint64_t canMessage::cycTime() const
{
    return m_cycTime;
}

/*!
 * @brief This function returns a reference to member cycTime
 * @return Reference to member cycTime
 */
uint64_t& canMessage::cycTime()
{
    return m_cycTime;
}


/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void canMessage::flags(
        uint16_t _flags)
{
    m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint16_t canMessage::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint16_t& canMessage::flags()
{
    return m_flags;
}


/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void canMessage::timeStamp(
        uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t canMessage::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t& canMessage::timeStamp()
{
    return m_timeStamp;
}


/*!
 * @brief This function sets a value in member timeStamp_d
 * @param _timeStamp_d New value for member timeStamp_d
 */
void canMessage::timeStamp_d(
        int64_t _timeStamp_d)
{
    m_timeStamp_d = _timeStamp_d;
}

/*!
 * @brief This function returns the value of member timeStamp_d
 * @return Value of member timeStamp_d
 */
int64_t canMessage::timeStamp_d() const
{
    return m_timeStamp_d;
}

/*!
 * @brief This function returns a reference to member timeStamp_d
 * @return Reference to member timeStamp_d
 */
int64_t& canMessage::timeStamp_d()
{
    return m_timeStamp_d;
}


/*!
 * @brief This function sets a value in member rxtx
 * @param _rxtx New value for member rxtx
 */
void canMessage::rxtx(
        uint8_t _rxtx)
{
    m_rxtx = _rxtx;
}

/*!
 * @brief This function returns the value of member rxtx
 * @return Value of member rxtx
 */
uint8_t canMessage::rxtx() const
{
    return m_rxtx;
}

/*!
 * @brief This function returns a reference to member rxtx
 * @return Reference to member rxtx
 */
uint8_t& canMessage::rxtx()
{
    return m_rxtx;
}


/*!
 * @brief This function sets a value in member isFd
 * @param _isFd New value for member isFd
 */
void canMessage::isFd(
        uint8_t _isFd)
{
    m_isFd = _isFd;
}

/*!
 * @brief This function returns the value of member isFd
 * @return Value of member isFd
 */
uint8_t canMessage::isFd() const
{
    return m_isFd;
}

/*!
 * @brief This function returns a reference to member isFd
 * @return Reference to member isFd
 */
uint8_t& canMessage::isFd()
{
    return m_isFd;
}


/*!
 * @brief This function sets a value in member isRt
 * @param _isRt New value for member isRt
 */
void canMessage::isRt(
        uint8_t _isRt)
{
    m_isRt = _isRt;
}

/*!
 * @brief This function returns the value of member isRt
 * @return Value of member isRt
 */
uint8_t canMessage::isRt() const
{
    return m_isRt;
}

/*!
 * @brief This function returns a reference to member isRt
 * @return Reference to member isRt
 */
uint8_t& canMessage::isRt()
{
    return m_isRt;
}


/*!
 * @brief This function sets a value in member isExt
 * @param _isExt New value for member isExt
 */
void canMessage::isExt(
        uint8_t _isExt)
{
    m_isExt = _isExt;
}

/*!
 * @brief This function returns the value of member isExt
 * @return Value of member isExt
 */
uint8_t canMessage::isExt() const
{
    return m_isExt;
}

/*!
 * @brief This function returns a reference to member isExt
 * @return Reference to member isExt
 */
uint8_t& canMessage::isExt()
{
    return m_isExt;
}


/*!
 * @brief This function sets a value in member errorCode
 * @param _errorCode New value for member errorCode
 */
void canMessage::errorCode(
        uint8_t _errorCode)
{
    m_errorCode = _errorCode;
}

/*!
 * @brief This function returns the value of member errorCode
 * @return Value of member errorCode
 */
uint8_t canMessage::errorCode() const
{
    return m_errorCode;
}

/*!
 * @brief This function returns a reference to member errorCode
 * @return Reference to member errorCode
 */
uint8_t& canMessage::errorCode()
{
    return m_errorCode;
}






canMessages::canMessages()
{
}

canMessages::~canMessages()
{
}

canMessages::canMessages(
        const canMessages& x)
{
    m_len = x.m_len;
    m_canMsgs = x.m_canMsgs;
}

canMessages::canMessages(
        canMessages&& x) noexcept
{
    m_len = x.m_len;
    m_canMsgs = std::move(x.m_canMsgs);
}

canMessages& canMessages::operator =(
        const canMessages& x)
{

    m_len = x.m_len;
    m_canMsgs = x.m_canMsgs;
    return *this;
}

canMessages& canMessages::operator =(
        canMessages&& x) noexcept
{

    m_len = x.m_len;
    m_canMsgs = std::move(x.m_canMsgs);
    return *this;
}

bool canMessages::operator ==(
        const canMessages& x) const
{
    return (m_len == x.m_len &&
           m_canMsgs == x.m_canMsgs);
}

bool canMessages::operator !=(
        const canMessages& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member len
 * @param _len New value for member len
 */
void canMessages::len(
        uint64_t _len)
{
    m_len = _len;
}

/*!
 * @brief This function returns the value of member len
 * @return Value of member len
 */
uint64_t canMessages::len() const
{
    return m_len;
}

/*!
 * @brief This function returns a reference to member len
 * @return Reference to member len
 */
uint64_t& canMessages::len()
{
    return m_len;
}


/*!
 * @brief This function copies the value in member canMsgs
 * @param _canMsgs New value to be copied in member canMsgs
 */
void canMessages::canMsgs(
        const std::vector<canMessage>& _canMsgs)
{
    m_canMsgs = _canMsgs;
}

/*!
 * @brief This function moves the value in member canMsgs
 * @param _canMsgs New value to be moved in member canMsgs
 */
void canMessages::canMsgs(
        std::vector<canMessage>&& _canMsgs)
{
    m_canMsgs = std::move(_canMsgs);
}

/*!
 * @brief This function returns a constant reference to member canMsgs
 * @return Constant reference to member canMsgs
 */
const std::vector<canMessage>& canMessages::canMsgs() const
{
    return m_canMsgs;
}

/*!
 * @brief This function returns a reference to member canMsgs
 * @return Reference to member canMsgs
 */
std::vector<canMessage>& canMessages::canMsgs()
{
    return m_canMsgs;
}


// Include auxiliary functions like for serializing/deserializing.
#include "CanMessageDataCdrAux.ipp"

