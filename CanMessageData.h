// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CanMessageData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CANMESSAGEDATA_H_
#define _FAST_DDS_GENERATED_CANMESSAGEDATA_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CANMESSAGEDATA_SOURCE)
#define CANMESSAGEDATA_DllAPI __declspec( dllexport )
#else
#define CANMESSAGEDATA_DllAPI __declspec( dllimport )
#endif // CANMESSAGEDATA_SOURCE
#else
#define CANMESSAGEDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CANMESSAGEDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure canMessage defined by the user in the IDL file.
 * @ingroup CanMessageData
 */
class canMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport canMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~canMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object canMessage that will be copied.
     */
    eProsima_user_DllExport canMessage(
            const canMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object canMessage that will be copied.
     */
    eProsima_user_DllExport canMessage(
            canMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object canMessage that will be copied.
     */
    eProsima_user_DllExport canMessage& operator =(
            const canMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object canMessage that will be copied.
     */
    eProsima_user_DllExport canMessage& operator =(
            canMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x canMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const canMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x canMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const canMessage& x) const;

    /*!
     * @brief This function sets a value in member channel
     * @param _channel New value for member channel
     */
    eProsima_user_DllExport void channel(
            uint32_t _channel);

    /*!
     * @brief This function returns the value of member channel
     * @return Value of member channel
     */
    eProsima_user_DllExport uint32_t channel() const;

    /*!
     * @brief This function returns a reference to member channel
     * @return Reference to member channel
     */
    eProsima_user_DllExport uint32_t& channel();


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id();


    /*!
     * @brief This function sets a value in member dlc
     * @param _dlc New value for member dlc
     */
    eProsima_user_DllExport void dlc(
            uint8_t _dlc);

    /*!
     * @brief This function returns the value of member dlc
     * @return Value of member dlc
     */
    eProsima_user_DllExport uint8_t dlc() const;

    /*!
     * @brief This function returns a reference to member dlc
     * @return Reference to member dlc
     */
    eProsima_user_DllExport uint8_t& dlc();


    /*!
     * @brief This function sets a value in member dataLen
     * @param _dataLen New value for member dataLen
     */
    eProsima_user_DllExport void dataLen(
            uint16_t _dataLen);

    /*!
     * @brief This function returns the value of member dataLen
     * @return Value of member dataLen
     */
    eProsima_user_DllExport uint16_t dataLen() const;

    /*!
     * @brief This function returns a reference to member dataLen
     * @return Reference to member dataLen
     */
    eProsima_user_DllExport uint16_t& dataLen();


    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();


    /*!
     * @brief This function sets a value in member cycTime
     * @param _cycTime New value for member cycTime
     */
    eProsima_user_DllExport void cycTime(
            uint64_t _cycTime);

    /*!
     * @brief This function returns the value of member cycTime
     * @return Value of member cycTime
     */
    eProsima_user_DllExport uint64_t cycTime() const;

    /*!
     * @brief This function returns a reference to member cycTime
     * @return Reference to member cycTime
     */
    eProsima_user_DllExport uint64_t& cycTime();


    /*!
     * @brief This function sets a value in member flags
     * @param _flags New value for member flags
     */
    eProsima_user_DllExport void flags(
            uint16_t _flags);

    /*!
     * @brief This function returns the value of member flags
     * @return Value of member flags
     */
    eProsima_user_DllExport uint16_t flags() const;

    /*!
     * @brief This function returns a reference to member flags
     * @return Reference to member flags
     */
    eProsima_user_DllExport uint16_t& flags();


    /*!
     * @brief This function sets a value in member timeStamp
     * @param _timeStamp New value for member timeStamp
     */
    eProsima_user_DllExport void timeStamp(
            uint64_t _timeStamp);

    /*!
     * @brief This function returns the value of member timeStamp
     * @return Value of member timeStamp
     */
    eProsima_user_DllExport uint64_t timeStamp() const;

    /*!
     * @brief This function returns a reference to member timeStamp
     * @return Reference to member timeStamp
     */
    eProsima_user_DllExport uint64_t& timeStamp();


    /*!
     * @brief This function sets a value in member timeStamp_d
     * @param _timeStamp_d New value for member timeStamp_d
     */
    eProsima_user_DllExport void timeStamp_d(
            int64_t _timeStamp_d);

    /*!
     * @brief This function returns the value of member timeStamp_d
     * @return Value of member timeStamp_d
     */
    eProsima_user_DllExport int64_t timeStamp_d() const;

    /*!
     * @brief This function returns a reference to member timeStamp_d
     * @return Reference to member timeStamp_d
     */
    eProsima_user_DllExport int64_t& timeStamp_d();


    /*!
     * @brief This function sets a value in member rxtx
     * @param _rxtx New value for member rxtx
     */
    eProsima_user_DllExport void rxtx(
            uint8_t _rxtx);

    /*!
     * @brief This function returns the value of member rxtx
     * @return Value of member rxtx
     */
    eProsima_user_DllExport uint8_t rxtx() const;

    /*!
     * @brief This function returns a reference to member rxtx
     * @return Reference to member rxtx
     */
    eProsima_user_DllExport uint8_t& rxtx();


    /*!
     * @brief This function sets a value in member isFd
     * @param _isFd New value for member isFd
     */
    eProsima_user_DllExport void isFd(
            uint8_t _isFd);

    /*!
     * @brief This function returns the value of member isFd
     * @return Value of member isFd
     */
    eProsima_user_DllExport uint8_t isFd() const;

    /*!
     * @brief This function returns a reference to member isFd
     * @return Reference to member isFd
     */
    eProsima_user_DllExport uint8_t& isFd();


    /*!
     * @brief This function sets a value in member isRt
     * @param _isRt New value for member isRt
     */
    eProsima_user_DllExport void isRt(
            uint8_t _isRt);

    /*!
     * @brief This function returns the value of member isRt
     * @return Value of member isRt
     */
    eProsima_user_DllExport uint8_t isRt() const;

    /*!
     * @brief This function returns a reference to member isRt
     * @return Reference to member isRt
     */
    eProsima_user_DllExport uint8_t& isRt();


    /*!
     * @brief This function sets a value in member isExt
     * @param _isExt New value for member isExt
     */
    eProsima_user_DllExport void isExt(
            uint8_t _isExt);

    /*!
     * @brief This function returns the value of member isExt
     * @return Value of member isExt
     */
    eProsima_user_DllExport uint8_t isExt() const;

    /*!
     * @brief This function returns a reference to member isExt
     * @return Reference to member isExt
     */
    eProsima_user_DllExport uint8_t& isExt();


    /*!
     * @brief This function sets a value in member errorCode
     * @param _errorCode New value for member errorCode
     */
    eProsima_user_DllExport void errorCode(
            uint8_t _errorCode);

    /*!
     * @brief This function returns the value of member errorCode
     * @return Value of member errorCode
     */
    eProsima_user_DllExport uint8_t errorCode() const;

    /*!
     * @brief This function returns a reference to member errorCode
     * @return Reference to member errorCode
     */
    eProsima_user_DllExport uint8_t& errorCode();

private:

    uint32_t m_channel{0};
    uint32_t m_id{0};
    uint8_t m_dlc{0};
    uint16_t m_dataLen{0};
    std::vector<uint8_t> m_data;
    uint64_t m_cycTime{0};
    uint16_t m_flags{0};
    uint64_t m_timeStamp{0};
    int64_t m_timeStamp_d{0};
    uint8_t m_rxtx{0};
    uint8_t m_isFd{0};
    uint8_t m_isRt{0};
    uint8_t m_isExt{0};
    uint8_t m_errorCode{0};

};




/*!
 * @brief This class represents the structure canMessages defined by the user in the IDL file.
 * @ingroup CanMessageData
 */
class canMessages
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport canMessages();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~canMessages();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object canMessages that will be copied.
     */
    eProsima_user_DllExport canMessages(
            const canMessages& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object canMessages that will be copied.
     */
    eProsima_user_DllExport canMessages(
            canMessages&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object canMessages that will be copied.
     */
    eProsima_user_DllExport canMessages& operator =(
            const canMessages& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object canMessages that will be copied.
     */
    eProsima_user_DllExport canMessages& operator =(
            canMessages&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x canMessages object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const canMessages& x) const;

    /*!
     * @brief Comparison operator.
     * @param x canMessages object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const canMessages& x) const;

    /*!
     * @brief This function sets a value in member len
     * @param _len New value for member len
     */
    eProsima_user_DllExport void len(
            uint64_t _len);

    /*!
     * @brief This function returns the value of member len
     * @return Value of member len
     */
    eProsima_user_DllExport uint64_t len() const;

    /*!
     * @brief This function returns a reference to member len
     * @return Reference to member len
     */
    eProsima_user_DllExport uint64_t& len();


    /*!
     * @brief This function copies the value in member canMsgs
     * @param _canMsgs New value to be copied in member canMsgs
     */
    eProsima_user_DllExport void canMsgs(
            const std::vector<canMessage>& _canMsgs);

    /*!
     * @brief This function moves the value in member canMsgs
     * @param _canMsgs New value to be moved in member canMsgs
     */
    eProsima_user_DllExport void canMsgs(
            std::vector<canMessage>&& _canMsgs);

    /*!
     * @brief This function returns a constant reference to member canMsgs
     * @return Constant reference to member canMsgs
     */
    eProsima_user_DllExport const std::vector<canMessage>& canMsgs() const;

    /*!
     * @brief This function returns a reference to member canMsgs
     * @return Reference to member canMsgs
     */
    eProsima_user_DllExport std::vector<canMessage>& canMsgs();

private:

    uint64_t m_len{0};
    std::vector<canMessage> m_canMsgs;

};

#endif // _FAST_DDS_GENERATED_CANMESSAGEDATA_H_



